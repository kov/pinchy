#!/bin/sh
# SPDX-License-Identifier: MIT OR Apache-2.0
# Copyright (c) 2025 Gustavo Noronha Silva <gustavo@noronha.dev.br>

if [ -z "$1" ]; then
    echo "Need path to Linux repository"
    exit 1
fi

LINUX_PATH="$1"

pushd "$LINUX_PATH" > /dev/null || exit 1

echo "// SPDX-License-Identifier: MIT OR Apache-2.0" | tee /dev/stderr
echo "// Copyright (c) 2025 Gustavo Noronha Silva <gustavo@noronha.dev.br>" | tee /dev/stderr
echo "" | tee /dev/stderr
echo "// Auto-generated by scripts/gen-ioctl-requests-match" | tee /dev/stderr
echo "pub fn format_ioctl_request(request: u32) -> (&'static str, &'static str) {"
echo "    match request {"

(
# handle literal defines like #define IOCTL_NAME 0x1234
grep '^#define' include/uapi/asm-generic/ioctls.h | grep -v '_IO' | \
gawk '
BEGIN { }

{
    if (match($0, /^#define[ \t]+([A-Z0-9_]+)[ \t]+(0x[0-9A-Fa-f]+|[0-9]+)/, a)) {
        name = a[1]
        raw = a[2]
        value = strtonum(raw)
        hex = sprintf("0x%x", value)
        category = "tty"
        if (!(hex in seen)) {
            seen[hex] = name
            printf "        %s => (\"%s\", \"%s\"),\n", hex, category, name
        } else {
            print "// duplicate: " hex " already defined as " seen[hex] ", skipping " name > "/dev/stderr"
        }
    }
}
'

# handle _IO/_IOR/etc. macros
git grep -H '^#define' -- '*.h' | grep -v '^arch/' | grep -E '(_IOW\(|_IO\(|_IOR\(|_IORW\()' | \
gawk '
BEGIN {
    FS = ":"
}

function _IOC(dir, type, nr, size) {
    return (dir * (2**30)) + (size * (2**16)) + (type * (2**8)) + nr
}
function size_of(type) {
    gsub(/^struct /, "", type)
    gsub(/^union /, "", type)
    if (type == "_" || type == "") return 0
    if (type == "int") return 4
    if (type == "__u8" || type == "u8") return 1
    if (type == "__u16" || type == "u16") return 2
    if (type == "__u32" || type == "u32") return 4
    if (type == "__u64" || type == "u64") return 8
    return 8
}
function ord(c) {
    return index("\
\0\1\2\3\4\5\6\7\10\11\12\13\14\15\16\17\
\20\21\22\23\24\25\26\27\30\31\32\33\34\35\36\37\
 !\"#$%&'\''()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNO\
PQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", c) - 1
}
function category_from_file(path) {
    if (path ~ /sound\//) return "sound"
    if (path ~ /video|videodev|v4l2/) return "video"
    if (path ~ /usb/) return "usb"
    if (path ~ /vhost|virtio/) return "virtio"
    if (path ~ /tty|serial|termios/) return "tty"
    if (path ~ /fs|file|inode|ioctl|mount|xfs|f2fs|ext4|btrfs/) return "fs"
    if (path ~ /net|sock|inet|ipv6|if_|packet|ethernet/) return "net"
    if (path ~ /drm|fb|display|gpu|nouveau|radeon|amdgpu|i915/) return "display"
    if (path ~ /scsi|blk|loop|nvme|ata|floppy|ide|hdreg|cdrom/) return "block"
    if (path ~ /hid|input|evdev|uinput|mouse|keyboard|joystick/) return "input"
    if (path ~ /watchdog/) return "watchdog"
    if (path ~ /hwmon|thermal|power/) return "hwmon"
    if (path ~ /kvm/) return "kvm"
    if (path ~ /random|urandom|rng/) return "random"
    if (path ~ /time|rtc|clock|hrtimer/) return "time"
    if (path ~ /media|cec|dvb/) return "media"
    if (path ~ /spi|i2c|bus/) return "bus"
    if (path ~ /security|keyctl|audit/) return "security"
    if (path ~ /vfio/) return "vfio"
    if (path ~ /misc|miscdevice/) return "misc"

    return "other"
}

{
    file = $1
    text = substr($0, index($0,$3))

    if (match(text, /#define[ \t]+([A-Z0-9_]+)[ \t]+_([A-Z]+)\(([^,]+), *([^,)]+)(, *([^)]*))?/, a)) {
        name = a[1]
        macro = a[2]
        raw_type_char = a[3]
        nr = a[4]
        type = (a[6] != "") ? a[6] : "_"

        gsub(/^[ \t]+|[ \t]+$/, "", type)

        if (raw_type_char ~ /^'\''./) {
            type_char = ord(substr(raw_type_char, 2, 1))
        } else if (raw_type_char ~ /^[0-9]+$/) {
            type_char = raw_type_char + 0
        } else {
            next
        }

        nr = strtonum(nr)

        if (macro == "IO") dir = 0
        else if (macro == "IOR") dir = 2
        else if (macro == "IOW") dir = 1
        else if (macro == "IORW") dir = 3
        else next

        size = size_of(type)
        val = _IOC(dir, type_char, nr, size)
        hex = sprintf("0x%x", val)
        category = category_from_file(file)

        if (!(hex in seen)) {
            seen[hex] = name
            printf "        %s => (\"%s\", \"%s\"),\n", hex, name, category
        } else {
            print "// duplicate: " hex " already defined as " seen[hex] ", skipping " name > "/dev/stderr"
        }
    }
}
'
) | sort
echo "        _ => (\"other\", \"unknown\"),"
echo "    }"
echo "}"
popd > /dev/null
